function [INPU, COND, MISC, VISC, WAKE, VEHI, SURF, OUTP] = fcnFORCES(valTIMESTEP, FLAG, INPU, COND, MISC, VISC, WAKE, VEHI, SURF)
%% Forces package
%place any force functions in here and add a description.

% INPUT:

% OUTPUT:
% valCL - Lift force coefficient
% valCDI - Ind. drag coefficient
% valE - Span Efficiency

%% Element normal forces, lift forces and side forces (freestream and induced)

[en, SURF.vecDVENFREE, SURF.vecDVENIND, SURF.vecDVELFREE, SURF.vecDVELIND, SURF.vecDVESFREE, SURF.vecDVESIND] = fcnDVENFORCE(SURF.matCOEFF...
    ,SURF.vecK,SURF.matDVE,SURF.valNELE,SURF.matCENTER,SURF.matVLST,SURF.matUINF,SURF.vecDVELESWP,SURF.vecDVEMCSWP,SURF.vecDVEHVSPN,SURF.vecDVEHVCRD,SURF.vecDVEROLL,...
    SURF.vecDVEPITCH,SURF.vecDVEYAW,SURF.vecDVELE,SURF.matADJE,WAKE.valWNELE, WAKE.matWDVE, WAKE.matWVLST, WAKE.matWCOEFF, WAKE.vecWK, WAKE.vecWDVEHVSPN,WAKE.vecWDVEHVCRD,...
    WAKE.vecWDVEROLL, WAKE.vecWDVEPITCH, WAKE.vecWDVEYAW, WAKE.vecWDVELESWP, WAKE.vecWDVETESWP, WAKE.valWSIZE, valTIMESTEP, SURF.vecDVESYM, SURF.vecDVETESWP, VEHI.matVEHROT, SURF.vecDVEVEHICLE, FLAG.TRI, FLAG.STEADY, FLAG.GPU);
%% TE Element induced drag forces

%% Induced Drag force

[inddrag] = fcnDVEINDDRAG(SURF.valNELE, SURF.matCOEFF, SURF.matDVE, SURF.matVLST, SURF.matUINF, SURF.vecDVEHVSPN, SURF.vecDVEHVCRD, SURF.vecDVETE, WAKE.valWNELE, WAKE.matWDVE, WAKE.matWVLST, WAKE.matWCOEFF, WAKE.vecWK, WAKE.vecWDVEHVSPN, WAKE.vecWDVEHVCRD, WAKE.vecWDVEROLL, WAKE.vecWDVEPITCH, WAKE.vecWDVEYAW, WAKE.vecWDVELESWP, WAKE.vecWDVETESWP, ...
    WAKE.valWSIZE, valTIMESTEP, SURF.vecDVESYM, SURF.vecDVEWING, WAKE.vecWDVESURFACE, FLAG.TRI, FLAG.STEADY, FLAG.GPU);

%% Sum up element forces to generate total wing forces
[OUTP.vecCL(valTIMESTEP,:), OUTP.vecCLF(valTIMESTEP,:), OUTP.vecCLI(valTIMESTEP,:), OUTP.vecCY(valTIMESTEP,:), OUTP.vecCYF(valTIMESTEP,:), OUTP.vecCYI(valTIMESTEP,:), OUTP.vecCDI(valTIMESTEP,:), OUTP.vecE(valTIMESTEP,:)]= fcnWINGNFORCE(SURF.vecDVELFREE, SURF.vecDVELIND, SURF.vecDVESFREE, SURF.vecDVESIND, inddrag, SURF.matUINF, INPU.vecAREA, INPU.vecSPAN, SURF.vecDVESYM, COND.vecVEHBETA, SURF.vecDVEVEHICLE, SURF.vecDVEWING, INPU.valVEHICLES);

% %% Viscous wrapper
[OUTP.vecCLv(valTIMESTEP,:), OUTP.vecCD(valTIMESTEP,:), OUTP.vecPREQ(valTIMESTEP,:), OUTP.vecLD(valTIMESTEP,:), matROTORCDP] = fcnVISCOUS(OUTP.vecCL, OUTP.vecCDI, COND.vecVEHVINF, INPU.vecAREA, COND.valDENSITY, VISC.valKINV, SURF.vecDVENFREE, SURF.vecDVENIND, ...
    SURF.vecDVELFREE, SURF.vecDVELIND, SURF.vecDVESFREE, SURF.vecDVESIND, SURF.vecDVEPANEL, SURF.vecDVELE, SURF.vecDVEWING, INPU.vecN, INPU.vecM, SURF.vecDVEAREA, ...
    SURF.matCENTER, SURF.vecDVEHVCRD, VISC.cellAIRFOIL, FLAG.VERBOSE, INPU.vecSYM, VISC.vecVSPANELS, VISC.matVSGEOM, VISC.vecFPANELS, VISC.matFGEOM, VISC.vecFTURB, ...
    VISC.vecFPWIDTH, VISC.vecINTERF, SURF.vecDVEROLL, INPU.valVEHICLES, SURF.vecDVEVEHICLE, SURF.vecDVEROTOR, SURF.matUINF, valTIMESTEP, COND.valMAXTIME, COND.valDELTIME, COND.vecROTORRPM, SURF.matDVE, SURF.matVLST,...
    SURF.matCOEFF, SURF.vecK, SURF.vecDVEHVSPN, SURF.vecDVEPITCH, SURF.vecDVEYAW, SURF.vecDVELESWP, SURF.vecDVETESWP,...
    WAKE.valWNELE, WAKE.matWDVE, WAKE.matWVLST, WAKE.matWCOEFF, WAKE.vecWK, WAKE.vecWDVEHVSPN, WAKE.vecWDVEHVCRD, WAKE.vecWDVEROLL, WAKE.vecWDVEPITCH, WAKE.vecWDVEYAW, WAKE.vecWDVELESWP, WAKE.vecWDVETESWP, WAKE.valWSIZE, ...
    FLAG.TRI, FLAG.STEADY, FLAG.GPU, SURF.valNELE, INPU.vecPANELWING, FLAG.VISCOUS);

%% Rotor Forces
if max(SURF.vecDVEROTOR) > 0
    [OUTP.vecCT(valTIMESTEP,:), OUTP.vecCP(valTIMESTEP,:)] = fcnROTORFORCE(matROTORCDP, en, SURF.vecDVENFREE, SURF.vecDVENIND, inddrag, SURF.matUINF, SURF.vecDVEROTOR, VEHI.matVEHROT, INPU.matROTORAXIS, COND.vecROTORRPM, INPU.vecROTDIAM, SURF.matUINFROT, SURF.vecQARM, SURF.vecDVEVEHICLE);
else
    OUTP.vecCT = nan;
    OUTP.vecCP = nan;
end

OUTP.vecCTCONV = OUTP.vecCT;

end

